***
Description
***

Check whether the number is Triangular or not. A number is termed as triangular number if
we can represent it in the form of triangular grid of points such that the points form an
equilateral triangle and each row contains as many points as the row number, i.e., the
first row has one point, second row has two points, third row has three points and so on.
The starting triangular numbers are 1, 3 (1+2), 6 (1+2+3), 10 (1+2+3+4).

Input:
The first line of input contains an integer T denoting the number of test cases. The first
line of each test case is N, N is the number to be checked if it is traingular or not.

Output:
If the number is Triangular then display 1 otherwise 0.

Constraints:

1<= T <= 100
1<= N <= 10000000

Example:

Input:
5
3
4
6
55
345

Output:
1
0
1
1
0

***
BEFORE-THOUGHTS
***

Of course we can just count up using a loop and
check if our number in question is equal to or
greater than the arithmetic sum.

I wanted to use a binary search after creating
a list of triangular numbers just for fun.

***
SOLUTION
***

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main (String[] args) {
		//code
		Scanner sc = new Scanner(System.in);
		
		int testNum = sc.nextInt();
		
		ArrayList<Integer> mList = getTriList();
		
		while(testNum-- > 0){
		    
		    int test = sc.nextInt();
		    
		    if(mBinarySearch(test, mList, 0, mList.size()-1)) System.out.println(1);
		    else System.out.println(0);
		    
		}
	}
	
	public static ArrayList<Integer> getTriList(){
	  int triNum = 0;
		int count = 1;
		ArrayList<Integer> mList = new ArrayList<Integer>();
		while(triNum < 10000000){
		    triNum = triNum + count;
		    mList.add(triNum);
		    count++;
		}
		return mList;
	}
	
	public static boolean mBinarySearch(int val, ArrayList<Integer> mList, int l, int r){
	    
	    if(r-l == 1){
	        if(val != mList.get(r) && val != mList.get(l)) return false;
	        else return true;
	    }
	    
	    int half = (r+l)/2;
	    
	    if(val < mList.get(half)) return mBinarySearch(val, mList, l, half);
	    else return mBinarySearch(val, mList, half, r);
	}
	
}

***
AFTER-THOUGHTS
***

Some people solved the quadratic formula to solve
this problem which yielded a complexity of O(1)!
