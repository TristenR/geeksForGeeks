***
DESCRIPTION
***

Given a matrix containing lower alphabetical characters only, we need to count number
of palindromic paths in given matrix. A path is defined as a sequence of cells starting
from top-left cell and ending at bottom-right cell. We are allowed to move to right
and down only from current cell.

Input:
The first line of input contains a single integer T denoting the number of test cases.
Then T test cases follow. Each test case consists of two lines. First line of each test
case consist of two space separated integers R and C, denoting the number of elements
in a row and column respectively. Second line of each test case consists of R*C space
separated chars denoting the elements in the matrix in row major order.

Output:
It should be single line output, Print the respective output in the respective line.

Constraints:
1<=T<=20
1<=R,C<=10

Example:
Input:
1
3 4
a a a b b a a a a b b a

Output:
3


***
SOLUTION
***

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
    
    public static void createM(String[] line, int n, int m, String[][] arr){

        for(int i = 0; i<n; i++){
            for(int j = 0; j < m; j++){
                int x = i*n +j;
                arr[i][j] = line[(i*m) + j];
            }
        }
    }

    public static boolean isPal(String line){
        for(int i = 0; i< line.length(); i++){
            if(line.charAt(i)!=line.charAt(line.length()-1-i))
                return false;
        }
        return true;
    }

    public static int recursionSol(String[][] arr, int n, int m, int x, int y, String word){

        word = word+arr[y][x];

        if(y == n-1 && x == m-1){
            if (isPal(word)) return 1;
            return 0;
        }

        if(y == n-1){
            return recursionSol(arr,n,m,x+1,y,word);
        }

        else if(x == m-1){
            return recursionSol(arr,n,m,x, y+1, word);
        }

        else{
            return recursionSol(arr, n, m, x+1, y, word) + recursionSol(arr, n, m, x, y+1, word);
        }
    }
    
	public static void main (String[] args) {
		//code
		Scanner sc = new Scanner(System.in);
        int testcases = sc.nextInt();

        while(testcases-- > 0){

            int n = sc.nextInt(), m = sc.nextInt();
            sc.nextLine();
            String[] chars = sc.nextLine().split(" ");
            String[][] arr = new String[n][m];
            createM(chars,n,m,arr);

            System.out.println(recursionSol(arr,n,m,0,0,""));

        }
	}
}
