***
DESCRIPTION
***

Given an integer K and a queue of integers, we need to reverse the order of the first K elements of the queue,
leaving the other elements in the same relative order.

Only following standard operations are allowed on queue.

    enqueue(x) : Add an item x to rear of queue
    dequeue() : Remove an item from front of queue
    size() : Returns number of elements in queue.
    front() : Finds front item.

Input Format:
First line consists of T test cases. First line of every test case consists of 2 integers, N and K, denoting number
of elements and number of elements to be reversed respectively. Second line of every test case consists of elements of array.

Output Format:
For each testcase, in a new line, print the modified queue.

Your Task:
Since this is a function problem, you don't need to take inputs. Just complete the provided functions.

Constraints:
1 <= T <= 100
1 <= N <= 1000
1 <= K <= N

Example:
Input:
1
5 3
1 2 3 4 5
Output:
3 2 1 4 5

***
SOLUTION
***

/*Please note that it's Function problem i.e.
you need to write your solution in the form of Function(s) only.
Driver Code to call/invoke your function is mentioned above.*/

//User function Template for Java
class GfG
{
    public Queue<Integer> modifyQueue(Queue<Integer> q, int k)
    {
      //add code here.
      
      Stack<Integer> mStack = new Stack<Integer>();
      Queue<Integer> mQ = new LinkedList<Integer>();
      int size = q.size();
      
      for(int i = 0; i < k; i++){
          mStack.push(q.remove());
      }
      
      for(int i = 0; i < size; i++){
          if(i < k) mQ.add(mStack.pop());
          else mQ.add(q.remove());
      }
      
      return mQ;
      
    }
}

***
AFTER-THOUGHTS
***

I tried thinking of a slick recursive solution
but none came to mind.
