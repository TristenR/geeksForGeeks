***
DESCRIPTION
***

Given N edges of a graph. The task is to do depth first traversal of the graph.
Note: Please use recursive approach.

Input:
First line of input contains number of testcases T. For each testcase, first line contains
number of edges and next line contains N pairs of integers (X and Y each) where X Y means an edge from X to Y.

Output:
For each testcase, print the nodes while doing DFS starting from node 1.

Your task:
The task is to complete the function dfs() which should do the depth first traversal of given
graph and prints the node in DFS order.

Constraints:
1 <= T <= 100
1 <= N <= 500

Example:
Input:
1
4
1 2 1 3 1 4 3 5

Output:
1 2 3 5 4    // dfs from node 1

Explanation:
Testcase 1: There is  one test cases.  First line of each test case represent an integer N denoting
number of edges and then in the next line N pairs of values a and b are fed which denotes there is an edge from a to b.


***
SOLUTION
***

//Driver code so the reader can understand the whole code
//My solution is below in the class GfG
{
//Code by Saksham Raj seth
import java.io.*;
import java.util.*;
 class DFS{
	 private static int V;
     private static LinkedList<Integer> adj[];
      @SuppressWarnings("unchecked")
    DFS(int v)
    {
        V = v;
        adj = new LinkedList[10001];
        for (int i=0; i<10001; ++i)
            adj[i] = new LinkedList<Integer>();
    }
    public static void main(String args[])
    {
		Scanner sc = new Scanner(System.in);
		int t = sc.nextInt();
		while(t-- > 0){
			boolean[] vis = new boolean[10001];
			for(int i=0;i<10001;i++)
				vis[i]=false;
			int n = sc.nextInt();
			DFS d = new DFS(n);
			for(int i = 0; i < n ; i++)
				addEdge(sc.nextInt(),sc.nextInt());
			GfG g = new GfG();
			g.DFS(1,adj,vis);
			System.out.println();
		}
    }
	 public static void addEdge(int v, int w)
    {
        adj[v].add(w);
        adj[w].add(v);
    }
}
}


/*Please note that it's Function problem i.e.
you need to write your solution in the form of Function(s) only.
Driver Code to call/invoke your function is mentioned above.*/

/*Complete the function below*/
class GfG
{   
    public void DFS(int v,LinkedList<Integer> adj[],boolean visited[])
    {
      // add code here.
      
      if(visited[v] == false){
        System.out.print(v + " ");
        visited[v] = true;
      }
      
      if(adj[v].peek() == null)
        return;
        
      int x = adj[v].remove();  
      
      if(visited[x] == false)
        DFS(x,adj,visited);
      
      DFS(v, adj, visited);
           
    }
}

***
AFTER-THOUGHTS
***
I looked at other solutions after I finished
mine and saw that many people used a for loop
between their recursive calls. I believe this 
makes it simpler and more efficient but I 
strictly wanted to use recursion as a challenge.
