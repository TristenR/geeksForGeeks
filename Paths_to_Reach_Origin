***
DESCRIPTION
***

You are standing on a point (n, m) and you want to go to origin (0, 0) by taking steps either left or down i.e. from
each point you are allowed to move either in (n-1, m) or (n, m-1). Find the number of paths from point to origin.

Input:
The first line of input contains an integer T denoting the number of test cases. Then T test cases follow. Each test
case contains two integers n and m representing the point.

Output:
For each testcase, in a new line, print the total number of paths from point to origin.

Constraints:
1 <= T<= 100
1 <= n, m <= 25

Example:
Input:
3
3 2
3 6
3 0

Output:
10
84
1

***
BEFORE-THOUGHTS
***

The answer is (n+m)!/((min(n,m))!(n+m - min(n,m))!)

***
SOLUTION
***

import java.math.BigInteger;
import java.util.Scanner;

public class Main {

    public static BigInteger factorial(int a){
        if(a == 1 || a == 0)
            return new BigInteger("1");
        return new BigInteger(Integer.toString(a)).multiply(factorial(a-1));
    }

    public static String combination(int a, int b){
        BigInteger N = factorial(a);
        BigInteger D = factorial(b);
        BigInteger D1 = factorial(a-b);
        return N.divide(D).divide(D1).toString();
    }

    public static void main(String[] args) {

        //code
        Scanner sc = new Scanner(System.in);
        int testcases = sc.nextInt();
        while(testcases-- > 0){
            int n = sc.nextInt(), m = sc.nextInt();
            System.out.println(combination(n+m,Math.min(n,m)));
        }

    }
}
