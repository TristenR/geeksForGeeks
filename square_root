***
DESCRIPTION
***

Given an integer x. The task is to find the square root of x. If x is not a perfect square, then return floor(√x).

Input Format:
First line of input contains number of testcases T. For each testcase, the only line contains the number x.

Output Format:
For each testcase, print square root of given integer.

User Task:
The task is to complete the function floorSqrt() which should return the square root of given number x.

Constraints:
1 ≤ T ≤ 1000
1 ≤ x ≤ 106

Example:
Input:
2
5
4

Output:
2
2

Explanation:
Testcase 1: Since, 5 is not perfect square, so floor of square_root of 5 is 2.
Testcase 2: Since, 4 is a perfect square, so its square root is 2.

***
BEFORE THOUGHTS
***

I think Java has a floor function in its math library.
Anyway I decided to do it using Newton's method. This
solution isn't solid however since the larger the integer gets
the more iterations the for loop needs. For the given
test cases it covers it, but a general solution would
would change the the number of for loop iterations
based on the size of the integer in question. This would
then yield good enough precision to truncate the double
and return the correct floor value.

***
SOLUTION
***

/*Please note that it's Function problem i.e.
you need to write your solution in the form of Function(s) only.
Driver Code to call/invoke your function is mentioned above.*/

/*You are required to complete
this function*/

class GfG
{
     long floorSqrt(long x)
	 {
		// Your code here
		
		double start = 1;
		
		
		for(int i = 0; i < 20; i++ ){
		    start = 0.5*(start + (x/start));
		}
		
		long end =  (long) start/1;
		
		return end;
	 }
}
