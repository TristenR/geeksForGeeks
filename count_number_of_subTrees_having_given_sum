***
DESCRIPTION
***

Given a binary tree containing N+1 with N edges nodes and an integer X. Your task is to complete the function
countSubtreesWithSumX() that returns the count of the number of subtrees having total nodeâ€™s data sum equal to a value X.

 Example: For the tree given below:            

              5
           /     \
        -10       3
        /   \    /  \
       9     8 -4    7

Subtree with sum 7:
             -10
            /    \
           9      8

and one node 7.

Input:
First line of input contains number of testcases T. For each testcase, first line of input contains number of edges in the tree. Next line contains information as X Y L or X Y R which means Y is on the left of X or Y is on the right of X respectively. Last line contains sum.

Output:
For each test case count the number of subtrees with given sum.

Constraints:
1 <= T <= 103
1 <= N <= 103
-103 <= Node Value <= 103

Example:
Input:
2
6
5 -10 L 5 3 R -10 9 L -10 8 R 3 -4 L 3 7 R
7
2
1 2 L 1 3 R
5

Output:
2
0

Explanation:
Testcase 1: Subtrees with sum 7 are [9, 8, -10] and [7].


***
SOLUTION
***

/*Please note that it's Function problem i.e.
you need to write your solution in the form of Function(s) only.
Driver Code to call/invoke your function is mentioned above.*/

//User function Template for Java
/*class Node
{
    int data;
    Node left,right;
    Node(int d)
    {
        data=d;
        left=right=null;
    }
}*/
// Return the count of the sub-trees having sum as X.
class GFG
{
    int countSubtreesWithSumX(Node root, int x)
    {
	//Add your code here.
	
	if(root ==  null) return 0;
	
	int tick = 0;
	
	if(subtreeSum(root) == x) tick = 1;
	
    return tick + countSubtreesWithSumX(root.right, x) + 
        countSubtreesWithSumX(root.left, x);
	
        
    }
    
    public static int subtreeSum(Node root){
        if(root == null) return 0;
        
        else return  root.data + subtreeSum(root.right) + subtreeSum(root.left);
    }
}
